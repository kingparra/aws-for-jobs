---
##########################################################################
###### Ref Function
##########################################################################

# Ref returns the value of the specified parameter or resource
#
# - When you specify a parameter's logical name, it returns
#   the value of the parameter.
#
# - When you specify a resource's logical name, it returns a value
#   that you can typically use to refer to that resource, such as
#   a physical ID.
#
# YAML Syntax
# Ref: logicalName
# !Ref logicalName
#
# * logicalName = The logical name of the resource or parameter
#   you want to dereference.


### Example
Parameters:
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'

Resources:
  Ec2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      SecurityGroups:
        - !Ref InstanceSecurityGroup
        - MyExistingSecurityGroup
      KeyName: !Ref KeyName
      ImageId: ami-7a11e213
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

# Notes:
#
# !Ref InstanceSecurityGroup is pulling the physical ID of InstanceSecurityGroup
# and MyExistingSecurityGroup is a string that refers to an existing EC2 security
# group instead of a security group declared in a template.
#
# !Ref KeyName is pointing at the parameter called KeyName.


##########################################################################
###### GetAtt Function
##########################################################################

# GetAtt returns the value of an attribute from a resource in the template.


# YAML Syntax
# Fn::GetAtt: [ logicalNameOfResource, attributeName ]
# !GetAtt logicalNameOfResource.attributeName
#
#
# * logicalNameOfResource = The logical name (also called logical ID) of the
#   resource that contains the attribute that you want.
#
# * attributeName = The name of the resource-specific attribute whose value you
#   want. See the resource's reference page for details about the attributes
#   available for that resource type.

### Example
AWSTemplateFormatVersion: 2010-09-09
Resources:
  myELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      AvailabilityZones:
        - eu-west-1a
      Listeners:
        - LoadBalancerPort: '80'
          InstancePort: '80'
          Protocol: HTTP
  myELBIngressGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ELB ingress group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupOwnerId: !GetAtt myELB.SourceSecurityGroup.OwnerAlias
          SourceSecurityGroupName: !GetAtt myELB.SourceSecurityGroup.GroupName

# Notes:
# The example template returns the SourceSecurityGroup.OwnerAlias and
# SourceSecurityGroup.GroupName of the load balancer with the logical
# name myELB.

### Example
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref DBName
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPass
      Engine: MySQL
      DBInstanceClass: db.t2.micro
      AllocatedStorage: "5"
      VPCSecurityGroups:
        - !Ref DBSecutiryGroup
      DBInstanceIdentifier: !Join ["-", [ "RDSInstance4", !Ref "AWS::Region" ]]
      AvailabilityZone: !Select [0, !GetAZs ""]
      DBSubnetGroupName: DBSubnets

  ENDPOINTParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /student/endpoint
      Type: String
      Value: !GetAtt RDSInstance.Endpoint.Address
      Description: Endpooint of our DB
    DependsOn: RDSInstance

# Notes:
# This template obtains the endpoint address for an RDS Instance that's created
# in the same document.
#
##########################################################################
###### Sub Function
##########################################################################
#
# Sub substitutes variables in an input string with values that you specify.
# You can use this function to construct commands or outputs that include values
# that aren't available until you create or update a stack.
#
# YAML Syntax
# Fn::Sub: String
# !Sub String

Fn::Sub:
  - String
  - Var1Name: Var1Value
    Var2Name: Var2Value

!Sub
  - String
  - Var1Name: Var1Value
    Var2Name: Var2Value

### Example
# Imagine you need a string like a Role name
# RoleName:  # hello-world-dev-{yourregion}-lambdaRole

RoleName:
  !Sub 'hello-world-dev-${AWS::Region}-lambdaRole'

#### Example
# !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:vpc/${vpc}' #VPC arn

### Example
Name: !Sub
  - www.${Domain}
  - { Domain: !Ref RootDomainName }

RootDomainName: yellowtail.com
### Example
  Uri:
  !Sub
    - 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015/03/31/functions/${Function}/invocations'
    - { Function: !Ref HelloLambdaFunction }

##########################################################################
###### GetAzs Function
##########################################################################
#
# GetAZs returns an array that lists Availability Zones for a specified region
# in alphabetical order.
#
# YAML Syntax
Fn::GetAZs: region
!GetAZs region

# * region
# The name of the region for which you want to get the Availability Zones.
# You can use the AWS::Region pseudo parameter to specify the region in which the stack is created.
#  Specifying an empty string is equivalent to specifying AWS::Region.


### Example
mySubnet:
  Type: "AWS::EC2::Subnet"
  Properties:
    VpcId:
      !Ref VPC
    CidrBlock: 10.0.0.0/24
    AvailabilityZone:
      Fn::Select:
        - 2
        - Fn::GetAZs: ""

mySubnet2:
  Type: "AWS::EC2::Subnet"
  Properties:
    VpcId:
      !Ref VPC
    CidrBlock: 10.0.1.0/24
    AvailabilityZone:
      Fn::Select:
        - 0
        - Fn::GetAZs: ""


###Examples that do the same thing
Fn::GetAZs: ""

Fn::GetAZs:
  Ref: "AWS::Region"

Fn::GetAZs: us-east-1


##########################################################################
###### Base64 Function
##########################################################################

Base64 returns the Base64 representation of the input string.
This function is typically used to pass encoded data to Amazon EC2 instances by way of
the UserData property.

YAML Syntax
Fn::Base64: valueToEncode
!Base64 valueToEncode


* valueToEncode = The string value you want to convert to Base64.

### Example
Fn::Base64: Cloudformation

### Example
      UserData:
        Fn::Base64: |
          #!/bin/bash
          sudo yum update -y
          sudo yum install -y httpd
          sudo systemctl start httpd
          sudo systemctl enable httpd
          sudo usermod -a -G apache ec2-user
          sudo chown -R ec2-user:apache /var/www

##########################################################################
###### Select Function
##########################################################################

# Select returns a single object from a list of objects by index.
#
# YAML Syntax
# Fn::Select: [ index, listOfObjects ]
# !Select [ index, listOfObjects ]
#
#
#  * index = The index of the object to retrieve. This must be a value from zero
#    to N-1, where N represents the number of elements in the array.
#
# * listOfObjects = The list of objects to select from. This list must not be
#   null, nor can it have null entries.

### Example
!Select [ "0", [ "apples", "grapes", "oranges", "mangoes" ] ]

### Example

Parameters:
  DbSubnetIpBlocks:
    Description: "Comma-delimited list of three CIDR blocks"
    Type: CommaDelimitedList
    Default: "10.0.48.0/24, 10.0.112.0/24, 10.0.176.0/24"

Subnet0:
  Type: "AWS::EC2::Subnet"
  Properties:
    VpcId: !Ref VPC
    CidrBlock: !Select [ 0, !Ref DbSubnetIpBlocks ]


##########################################################################
###### Join Function
##########################################################################

# Join appends a set of values into a single value, separated by the specified
# delimiter. If a delimiter is the empty string, the set of values are
# concatenated with no delimiter.
#
# YAML Syntax
# Fn::Join: [ delimiter, [ comma-delimited list of values ] ]
# !Join [ delimiter, [ comma-delimited list of values ] ]
#
# * delimiter = The value you want to occur between fragments.
#   The delimiter will occur between fragments only. It won't
#   terminate the final value.
# * ListOfValues = The list of values you want combined.

### Example
The following example returns: "a:b:c".


!Join [ ":", [ a, b, c ] ]


### Example

RoleName:  # hello-world-dev-{region}-lambdaRole
  !Join
    - '-'
    - - 'hello-world'
      - 'dev'
      - !Ref 'AWS::Region'
      - 'lambdaRole'

##########################################################################
###### Pseudo Parameters
##########################################################################
# AWS::Region
# AWS::AccountId

##########################################################################
###### Resource Attributes
##########################################################################
###DependsOn
# specify that the creation of a specific resource follows another.
# When you add a DependsOn attribute to a resource, that resource is created
# only after the creation of the resource specified in the DependsOn attribute.

#Example
AWSTemplateFormatVersion: '2010-09-09'
Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0ff8a91507f77f867
    us-west-1:
      AMI: ami-0bdb828fd58c52235
    eu-west-1:
      AMI: ami-047bb4163c506cd98
    ap-northeast-1:
      AMI: ami-06cd52961ce9f0d85
    ap-southeast-1:
      AMI: ami-08569b978cc4dfa10
Resources:
  Ec2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - Ref: AWS::Region
        - AMI
    DependsOn: myDB
  myDB:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: '5'
      DBInstanceClass: db.t2.small
      Engine: MySQL
      EngineVersion: '5.5'
      MasterUsername: MyName
      MasterUserPassword: MyPassword


###DeletionPolicy
# With the DeletionPolicy attribute you can preserve, and in some cases, backup
# a resource when its stack is deleted. You specify a DeletionPolicy attribute
# for each resource that you want to control. If a resource has no
# DeletionPolicy attribute, AWS CloudFormation deletes the resource by default.

#Example
AWSTemplateFormatVersion: '2010-09-09'
Resources:
  myS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
